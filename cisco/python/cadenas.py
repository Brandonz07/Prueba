#print(len('word')) #muestra numero de caracteres (len)
#print('str1' + 'str2') #junta los aargumentos (+)
#print(5 * 'a') #multiplica los argumentos, no importa el orden (*)
#print(ord('a')) #muesta el valor de codigo en ASCII/UNICODE (ord)
#print(chr(97)) #muestra el caracter segun el codigo (chr)
#print('alpha'[1:3]) #rebana la cadena ([:])
#print("f" in 'alphabet') #muesta si el argumento esta en la cadena (in)
#print("f" not in 'alphabet') # lo mismo de arriba pero al revez (not in)
#print("a" + 'alphabet') #juntar cadenas, se agregan al inicio o al final depende de donde lo ponga (+)
#print(min("aAbByYzZ")) #muestra que caracter es el menor segun el codigo unicode (min)
#print(max("aAbByYzZ")) # lo mismo de arriba pero al revez (max)
#print("aAbByYzZaA".index("b")) # dice en que valor esta el argumento (.index)
#print(list("abcabc")) #muestra la cadena como lista (list)
#print('aBcD'.capitalize()) #pone la primera letra en mayuscula y las otras en minusculas (.capitalize)
#print('[' + 'alpha'.center(10) + ']') #centra la cadena (.center())
#print('zeta'.endswith("a")) #dice si el argumento es lo ultimo de la cadena (.endswith)
#print("Eta".find("ta")) #parecido al metodo index, pero no da error, imprime -1 (.find)
#print('kappa'.find('a', 2)) #El segundo argumento especifica el índice en el que se iniciará la búsqueda
#print('lambda_30'.isalnum()) #muestra si la cadena solo contiene digitos o letras (.insalnum())
#print("Moooo".isalpha()) #muestra si todos son letras (.isalpha)
#print('2018'.isdigit()) #muestra si todos son digitos (.isdigit)
#print("Moooo".islower()) #muestra si todos son letras  minusculas (.islower)
#print(" ".isspace()) #muestra si solo tiene espacios en blanco (.isspace)
#print('MOOOO'.isupper()) #muestra si todos son letras mayusculas (.issuper)
#print(",".join(["omicron", "pi", "rho"])) #necesita como argumento una lista con cadenas, y las junta, con el separador usado (.join)
#print("SiGmA=60".lower()) #pone todas las letra en minuscula (.lower)
#print("[" + " tau ".lstrip() + "]") #elimina todos los espacios en blanco iniciales, y si se le agrega parametros, borra eso como inicial (lstrip())
#print("This is it!".replace("is", "are")) #necesita dos parametros, el primero que es el que se quiere cambiar, y el segundo por el cual se cambia (replace())
#print("tau tau tau".rfind("ta")) # no lo entendi (.rfind)
#print("[" + " upsilon ".rstrip() + "]") #elimina todos los espacios en blanco finales, y si se le agrega parametros, borra eso como inicial (rstrip())
#print("phi       chi\npsi".split()) #separa la cadena en una lista por los espacios en blanco (.split())
#print("omega".startswith("meg")) # dice si el argumento es lo inicial de la cadena (.startswith)
#print("[" + "   aleph   ".strip() + "]") #borra los espacios blancos finales e iniciales (.strip())
#print("Yo sé que no sé nada.".swapcase()) #cambia las mayusculas por minusculas y viceversa (.swapcase)
#print("Yo sé que no sé nada. Part 1.".title()) #cambia el inicio de cada letra a mayuscula (.title())
#print("Yo sé que no sé nada. Part 2.".upper()) #pone todas las letras en mayusculas (.upper())
#con .sort se ordena una lista al momento
#con .sorted se ordena una lista
#print(str(15)) # convierte un numero en cadena (str())
#print(int('15')+5) #convierte una cadena en un entero o flotante (int, float())



